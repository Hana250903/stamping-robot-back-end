// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StamingRobot.Repository.Entities;

#nullable disable

namespace StamingRobot.Repository.Migrations
{
    [DbContext(typeof(StampingRobotContext))]
    [Migration("20250301181048_fix_StampingJob")]
    partial class fix_StampingJob
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "Role", new[] { "Admin", "Employee" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StamingRobot.Repository.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Dimensions");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Material");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("StampId")
                        .HasColumnType("integer")
                        .HasColumnName("StampID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_Product");

                    b.HasIndex("StampId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Robot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RobotID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK_Robot");

                    b.HasIndex("UserId");

                    b.ToTable("Robot", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Stamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StampID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("InkColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("InkColor");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_Stamp");

                    b.ToTable("Stamp", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JobID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("SessionID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("StepNumber");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_StampingJob");

                    b.HasIndex("SessionId");

                    b.ToTable("StampingJob", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SessionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<int?>("RobotId")
                        .HasColumnType("integer")
                        .HasColumnName("RobotID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK_StampingSession");

                    b.HasIndex("ProductId");

                    b.HasIndex("RobotId");

                    b.HasIndex("UserId");

                    b.ToTable("StampingSession", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.TaskAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TaskAssignmentID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Details");

                    b.Property<string>("ImageCaptured")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ImageCaptured");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("JobID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_TaskAssignment");

                    b.HasIndex("JobId");

                    b.ToTable("TaskAssignment", (string)null);
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodeOtpEmail")
                        .HasColumnType("integer")
                        .HasColumnName("CodeOTPEmail");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("FullName");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text")
                        .HasColumnName("GoogleId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Phone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Product", b =>
                {
                    b.HasOne("StamingRobot.Repository.Entities.Stamp", "Stamp")
                        .WithMany("Products")
                        .HasForeignKey("StampId")
                        .HasConstraintName("FK_Stamp_Product");

                    b.Navigation("Stamp");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Robot", b =>
                {
                    b.HasOne("StamingRobot.Repository.Entities.User", "User")
                        .WithMany("Robots")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Robot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingJob", b =>
                {
                    b.HasOne("StamingRobot.Repository.Entities.StampingSession", "Session")
                        .WithMany("StampingJobs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StampingSession_StampingJob");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingSession", b =>
                {
                    b.HasOne("StamingRobot.Repository.Entities.Product", "Product")
                        .WithMany("StampingSessions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product_StampingSession");

                    b.HasOne("StamingRobot.Repository.Entities.Robot", "Robot")
                        .WithMany("StampingSessions")
                        .HasForeignKey("RobotId")
                        .HasConstraintName("FK_Robot_StampingSession");

                    b.HasOne("StamingRobot.Repository.Entities.User", "User")
                        .WithMany("StampingSessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_StampingSession_User");

                    b.Navigation("Product");

                    b.Navigation("Robot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.TaskAssignment", b =>
                {
                    b.HasOne("StamingRobot.Repository.Entities.StampingJob", "StampingJob")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StampingJob_TaskAssignment");

                    b.Navigation("StampingJob");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Product", b =>
                {
                    b.Navigation("StampingSessions");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Robot", b =>
                {
                    b.Navigation("StampingSessions");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.Stamp", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingJob", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.StampingSession", b =>
                {
                    b.Navigation("StampingJobs");
                });

            modelBuilder.Entity("StamingRobot.Repository.Entities.User", b =>
                {
                    b.Navigation("Robots");

                    b.Navigation("StampingSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
